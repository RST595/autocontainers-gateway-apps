########################
# Database
# Define secret for database
apiVersion: v1
kind: Secret
metadata:
  name: autocontainers-psql-secrets
type: kubernetes.io/basic-auth
data:
  password: cGFzc3dvcmQK

---
# Define configMap for database
apiVersion: v1
kind: ConfigMap
metadata:
  name: autocontainers-psql-config
  labels:
    app: psql
data:
  POSTGRES_DB: autoDB
  POSTGRES_USER: sa

---
# Define a 'Persistent Volume Claim'(PVC) for PSQL Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: autocontainers-psql-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: autocontainers-psql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 100Mi    #This will tell kubernetes about the amount of space we are trying to claim.
---
# Configure 'Deployment' of psql server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autocontainers-psql
  labels:
    app: autocontainers-psql
    tier: database
spec:
  selector: # psql Pod Should contain same labels
    matchLabels:
      app: autocontainers-psql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: autocontainers-psql
        tier: database
    spec:
      containers:
        - image: postgres # image from docker-hub
          imagePullPolicy: "IfNotPresent"
          name: autocontainers-psql
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: autocontainers-psql-secrets
                  key: password
          envFrom:
            - configMapRef:
                name: autocontainers-psql-config
            - secretRef:
                name: autocontainers-psql-secrets
          ports:
            - containerPort: 5432
              name: autocon-psql
          volumeMounts: # Mounting volume obtained from Persistent Volume Claim
            - name: autocontainers-psql-persistent-storage
              mountPath: /var/lib/psql #This is the path in the container on which the mounting will take place.
      volumes:
        - name: autocontainers-psql-persistent-storage # Obtaining 'volume' from PVC
          persistentVolumeClaim:
            claimName: autocontainers-psql-pv-claim
---
# Define a 'Service' To Expose psql to Other Services
apiVersion: v1
kind: Service
metadata:
  name: autocontainers-psql  # DNS name
  labels:
    app: autocontainers-psql
    tier: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector: # psql Pod Should contain same labels
    app: autocontainers-psql
    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant

---
########################
# autocontainers-gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autocontainers-gateway
spec:
  selector:
    matchLabels:
      app: autocontainers-gateway
  replicas: 1
  template:
    metadata:
      labels:
        app: autocontainers-gateway
    spec:
      containers:
        - name: autocontainers-gateway
          image: autocontainers-gateway:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: POST_APP_URI
              value: http://autocontainers-app-svc:8080

---
apiVersion: v1
kind: Service
metadata:
  name: autocontainers-gateway-svc
spec:
  selector:
    app: autocontainers-gateway
  ports:
    - protocol: TCP
      port: 8080
      name: tcp-80
      targetPort: 8080
  type: NodePort

---
########################
# autocontainers-app
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autocontainers-app
spec:
  selector:
    matchLabels:
      app: autocontainers-app
  replicas: 1
  template:
    metadata:
      labels:
        app: autocontainers-app
    spec:
      containers:
        - name: autocontainers-app
          image: autocontainers-app:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: dev
            - name: DB_URL
              value: jdbc:postgresql://autocontainers-psql:5432/autoDB
            - name: DB_USERNAME
              value: sa
            - name: DB_PASSWORD
              value: password
            - name: SERVER_PORT
              value: '8080'

---
apiVersion: v1
kind: Service
metadata:
  name: autocontainers-app-svc
spec:
  selector:
    app: autocontainers-app
  ports:
    - protocol: TCP
      port: 8080
      name: tcp-80
      targetPort: 8080
  type: NodePort